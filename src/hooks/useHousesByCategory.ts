'use client';

/**
 * –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */

import { useState, useEffect } from 'react';
import type { HouseCard, HouseCategory } from '../types/houses';
import type { ServerHouse } from '../utils/serverHouses';
import { dataUrl, safeFetch } from '../utils/paths';

interface UseHousesByCategoryResult {
  houses: HouseCard[];
  loading: boolean;
  error: string | null;
}

export function useHousesByCategory(categoryId: HouseCategory): UseHousesByCategoryResult {
  const [houses, setHouses] = useState<HouseCard[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadHouses() {
      try {
        setLoading(true);
        setError(null);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ–º–æ–≤
        const result = await safeFetch<any>('/api/houses');
        
        if (result.error) {
          setError(result.error);
          return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API response
        const apiData = result.data?.data || result.data;
        
        if (!apiData?.categories) {
          setError('No categories data available');
          return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = apiData.categories[categoryId];
        if (!category) {
          setHouses([]);
          return;
        }

        console.log(`Category ${categoryId} has ${category.count} houses`);
        console.log('üîç Category data:', category);
        console.log('üè† Houses data length:', category.houses?.length);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ HouseCard —Ñ–æ—Ä–º–∞—Ç
        const housesData = category.houses || [];
        console.log('üè† Houses to process:', housesData.length);
        const houseCards: HouseCard[] = housesData.map((house: ServerHouse) => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω –∏–∑ availableRooms (–ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º bedroom*)
          const bedrooms = house.availableRooms?.filter(room => 
            room.toLowerCase().includes('bedroom') || room.toLowerCase().includes('badroom')
          ).length || 1;
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
          const bathrooms = house.availableRooms?.filter(room => 
            room.toLowerCase().includes('bathroom')
          ).length || 1;
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å –∏–∑ comparison.features –∏–ª–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          let sqft = house.squareFeet || 0;
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–æ—â–∞–¥–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ comparison.features
          if (!sqft && house.comparison?.features?.['Living Space']) {
            const ls = house.comparison.features['Living Space'];
            if (typeof ls === 'object') {
              // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ best/better/good
              const candidates = [ls.best, ls.better, ls.good].filter(v => v && typeof v === 'string');
              for (const candidate of candidates) {
                const match = candidate.replace(/,/g, '').match(/(\d+)/);
                if (match && match[1]) {
                  sqft = parseInt(match[1], 10);
                  break;
                }
              }
            } else if (typeof ls === 'string') {
              const match = ls.replace(/,/g, '').match(/(\d+)/);
              if (match && match[1]) {
                sqft = parseInt(match[1], 10);
              }
            }
          }
          
          return {
            id: house.id,
            name: house.name,
            description: house.description,
            image: house.images?.hero || '/assets/placeholder.jpg',
            category: house.category,
            bedrooms,
            bathrooms,
            sqft,
            hasTour360: !!house.tour360,
            hasComparison: !!house.comparison,
            hasDesignPackages: false, // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è design packages
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            maxDP: house.maxDP,
            maxPK: house.maxPK,
            availableRooms: house.availableRooms,
            comparison: house.comparison
          };
        });
        
        setHouses(houseCards);
        
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    }

    loadHouses();
  }, [categoryId]);

  return { houses, loading, error };
}
