import { useState, useEffect } from 'react';

interface UseNeoRoomsResult {
  availableRooms: string[];
  isLoading: boolean;
  error: string | null;
}

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç Neo –¥–æ–º–∞
 */
export function useNeoRooms(houseId: string): UseNeoRoomsResult {
  const [availableRooms, setAvailableRooms] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!houseId) {
      setAvailableRooms([]);
      setIsLoading(false);
      return;
    }

    const fetchRooms = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "neo-" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanHouseId = houseId.startsWith('neo-') ? houseId.substring(4) : houseId;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API endpoint
        const response = await fetch(`/api/neo/${cleanHouseId}/packages`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch Neo rooms: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.success && data.data && data.data.availableRooms) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã: living –ø–µ—Ä–≤–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
          const sortedRooms = [...data.data.availableRooms].sort((a, b) => {
            // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç - living, –æ–Ω–∞ –∏–¥–µ—Ç –ø–µ—Ä–≤–æ–π
            if (a === 'living' && b !== 'living') return -1;
            if (b === 'living' && a !== 'living') return 1;
            // –ï—Å–ª–∏ –æ–±–µ –∏–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ living, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            return a.localeCompare(b);
          });
          
          setAvailableRooms(sortedRooms);
          console.log(`üè† Neo rooms loaded for ${cleanHouseId} (${houseId}):`, sortedRooms);
        } else {
          // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º
          const defaultRooms = ['living', 'kitchen', 'bedroom', 'bathroom'];
          setAvailableRooms(defaultRooms);
          console.warn(`Using default rooms for ${cleanHouseId} (${houseId}):`, defaultRooms);
        }
      } catch (err) {
        const cleanHouseId = houseId.startsWith('neo-') ? houseId.substring(4) : houseId;
        console.error(`Error fetching Neo rooms for ${cleanHouseId} (${houseId}):`, err);
        setError(err instanceof Error ? err.message : 'Unknown error');
        
        // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const defaultRooms = ['living', 'kitchen', 'bedroom', 'bathroom'];
        setAvailableRooms(defaultRooms);
      } finally {
        setIsLoading(false);
      }
    };

    fetchRooms();
  }, [houseId]);

  return {
    availableRooms,
    isLoading,
    error
  };
}
