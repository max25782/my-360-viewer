'use client';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Service Worker –∏ PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */

import { useEffect, useState } from 'react';

interface UseServiceWorkerResult {
  isOffline: boolean;
  isInstallable: boolean;
  install: () => Promise<void>;
  update: () => Promise<void>;
  preloadCategory: (categoryId: string) => void;
  registerAssets: (assets: string[]) => void;
}

export function useServiceWorker(): UseServiceWorkerResult {
  const [isOffline, setIsOffline] = useState(false);
  const [isInstallable, setIsInstallable] = useState(false);
  const [installPrompt, setInstallPrompt] = useState<any>(null);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Service Worker
    if (typeof window === 'undefined' || !('serviceWorker' in navigator)) {
      console.log('Service Worker not supported');
      return;
    }

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker
    const registerSW = async () => {
      try {
        // –í–∫–ª—é—á–∞–µ–º Service Worker –¥–∞–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å SW –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        /*
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker
          const registrations = await navigator.serviceWorker.getRegistrations();
          for (let registration of registrations) {
            await registration.unregister();
            console.log('üßπ Service Worker —É–¥–∞–ª–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
          }
          return;
        }
        */
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if (!window.isSecureContext && window.location.hostname !== 'localhost') {
          console.warn('‚ö†Ô∏è Service Worker —Ç—Ä–µ–±—É–µ—Ç HTTPS –∏–ª–∏ localhost');
          return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker...');
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        });
        
        console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');
          
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                console.log('üîÑ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Service Worker –¥–æ—Å—Ç—É–ø–Ω–∞');
              }
            });
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Service Worker
        if (registration.active) {
          console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–µ–Ω');
        } else if (registration.installing) {
          console.log('‚è≥ Service Worker —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è');
        } else if (registration.waiting) {
          console.log('‚è≥ Service Worker –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      }
    };
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º SW –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'complete') {
      registerSW();
    } else {
      window.addEventListener('load', registerSW);
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏
    const updateOnlineStatus = () => {
      setIsOffline(!navigator.onLine);
    };

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsOffline(!navigator.onLine);

    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);

    // PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setInstallPrompt(e);
      setIsInstallable(true);
    };

    const handleAppInstalled = () => {
      console.log('‚úÖ PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      setIsInstallable(false);
      setInstallPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('online', updateOnlineStatus);
      window.removeEventListener('offline', updateOnlineStatus);
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
  const install = async (): Promise<void> => {
    if (!installPrompt) return;
    
    try {
      const result = await installPrompt.prompt();
      console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞:', result);
      
      setInstallPrompt(null);
      setIsInstallable(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA:', error);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker
  const update = async (): Promise<void> => {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          await registration.update();
          console.log('üîÑ Service Worker –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker:', error);
      }
    }
  };

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const preloadCategory = (categoryId: string): void => {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({
        type: 'PRELOAD_CATEGORY',
        categoryId
      });
    }
  };

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const registerAssets = (assets: string[]): void => {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller && assets.length > 0) {
      navigator.serviceWorker.controller.postMessage({
        type: 'CACHE_ASSETS',
        assets
      });
      console.log('üîÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', assets.length, '—Ñ–∞–π–ª–æ–≤');
    }
  };

  return {
    isOffline,
    isInstallable,
    install,
    update,
    preloadCategory,
    registerAssets
  };
}