import { NextResponse } from 'next/server';
import { readdir } from 'fs/promises';
import { join } from 'path';

export async function GET(
  request: Request,
  { params }: { params: Promise<{ houseId: string }> }
) {
  try {
    const { houseId } = await params;
    
    // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ interior –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–º–∞
    const interiorPath = join(process.cwd(), 'public', 'assets', 'skyline', houseId, 'interior');
    
    try {
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ interior
      const entries = await readdir(interiorPath, { withFileTypes: true });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ (–∫–æ–º–Ω–∞—Ç—ã)
      const rooms = entries
        .filter(entry => entry.isDirectory())
        .map(entry => entry.name)
        .sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      
      console.log(`üìÅ Found rooms for ${houseId}:`, rooms);
      
      return NextResponse.json({
        success: true,
        data: {
          houseId,
          rooms,
          count: rooms.length
        }
      });
      
    } catch (dirError) {
      console.warn(`‚ö†Ô∏è Interior directory not found for ${houseId}:`, dirError);
      
      return NextResponse.json({
        success: true,
        data: {
          houseId,
          rooms: [],
          count: 0,
          message: 'No interior rooms found'
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error getting rooms:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to get rooms',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
