import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
export function middleware(request: NextRequest) {
  const url = request.nextUrl.clone();
  const { pathname } = url;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üîÑ Middleware processing: ${pathname}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è Walnut
  if (pathname === '/houses/Walnut' || pathname === '/houses/walnut') {
    console.log(`‚ö†Ô∏è Detected Walnut URL, checking for redirect loop...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç
    const redirectCount = request.cookies.get('redirect_count')?.value || '0';
    const count = parseInt(redirectCount, 10);
    
    // –ï—Å–ª–∏ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
    if (count > 2) {
      console.log(`üõë Detected redirect loop for Walnut, stopping redirects`);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      const response = NextResponse.next();
      response.cookies.set('redirect_count', '0');
      return response;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    const response = NextResponse.next();
    response.cookies.set('redirect_count', (count + 1).toString());
    return response;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö URL —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
  if (request.cookies.has('redirect_count')) {
    const response = NextResponse.next();
    response.cookies.set('redirect_count', '0');
    return response;
  }
  
  return NextResponse.next();
}

// –£–∫–∞–∑—ã–≤–∞–µ–º, –¥–ª—è –∫–∞–∫–∏—Ö –ø—É—Ç–µ–π –ø—Ä–∏–º–µ–Ω—è—Ç—å middleware
export const config = {
  matcher: ['/houses/:path*'],
};
