/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG –∏–∫–æ–Ω–æ–∫ –∏–∑ SVG –¥–ª—è PWA
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏-–∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
 */

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

const ICON_SIZES = [72, 96, 128, 144, 152, 192, 384, 512];
const ICONS_DIR = path.join(process.cwd(), 'public/icons');

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(ICONS_DIR)) {
  fs.mkdirSync(ICONS_DIR, { recursive: true });
}

console.log('üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PWA –∏–∫–æ–Ω–∫–∏ –∏–∑ public/logo.png ...');

const SOURCE_LOGO = path.join(process.cwd(), 'public', 'logo.png');
if (!fs.existsSync(SOURCE_LOGO)) {
  console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω public/logo.png. –°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫–∏.');
}

async function generate() {
  for (const size of ICON_SIZES) {
    const filename = `icon-${size}x${size}.png`;
    const filepath = path.join(ICONS_DIR, filename);
    try {
      if (fs.existsSync(SOURCE_LOGO)) {
        await sharp(SOURCE_LOGO)
          .resize(size, size, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
          .png()
          .toFile(filepath);
      } else {
        // –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        const minimalPNG = Buffer.from([
          0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,
          0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
          0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
          0x08,0x06,0x00,0x00,0x00,0x1F,0x15,0xC4,0x89,
          0x00,0x00,0x00,0x0A,0x49,0x44,0x41,0x54,
          0x78,0x9C,0x62,0x00,0x00,0x00,0x02,0x00,0x01,0xE2,0x21,0xBC,0x33,
          0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82
        ]);
        fs.writeFileSync(filepath, minimalPNG);
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${filename} (${size}x${size})`);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏', filename, e);
    }
  }

  // Shortcuts
  for (const filename of ['shortcut-skyline.png', 'shortcut-tour.png']) {
    const filepath = path.join(ICONS_DIR, filename);
    try {
      if (fs.existsSync(SOURCE_LOGO)) {
        await sharp(SOURCE_LOGO)
          .resize(128, 128, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
          .png()
          .toFile(filepath);
      } else {
        const minimalPNG = Buffer.from([
          0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,
          0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
          0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,
          0x08,0x06,0x00,0x00,0x00,0x1F,0x15,0xC4,0x89,
          0x00,0x00,0x00,0x0A,0x49,0x44,0x41,0x54,
          0x78,0x9C,0x62,0x00,0x00,0x00,0x02,0x00,0x01,0xE2,0x21,0xBC,0x33,
          0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82
        ]);
        fs.writeFileSync(filepath, minimalPNG);
      }
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ shortcut: ${filename}`);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ shortcut', filename, e);
    }
  }

  console.log('üéâ –í—Å–µ PWA –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
}

generate();

// –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è shortcuts
const shortcutIcons = ['shortcut-skyline.png', 'shortcut-tour.png'];
shortcutIcons.forEach(filename => {
  const filepath = path.join(ICONS_DIR, filename);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∑–∞–≥–ª—É—à–∫—É
  const minimalPNG = Buffer.from([
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
    0x00, 0x00, 0x00, 0x0D,
    0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x01,
    0x08, 0x06, 0x00, 0x00, 0x00,
    0x1F, 0x15, 0xC4, 0x89,
    0x00, 0x00, 0x00, 0x0A,
    0x49, 0x44, 0x41, 0x54,
    0x78, 0x9C, 0x62, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,
    0xE2, 0x21, 0xBC, 0x33,
    0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4E, 0x44,
    0xAE, 0x42, 0x60, 0x82
  ]);
  
  fs.writeFileSync(filepath, minimalPNG);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ shortcut: ${filename}`);
});

console.log('üéâ –í—Å–µ PWA –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
