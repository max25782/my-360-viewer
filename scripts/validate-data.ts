#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 */

import * as fs from 'fs';
import * as path from 'path';
import type { CategoriesIndex, HouseCard, HouseDetails } from '../src/types/houses';

const DATA_DIR = path.join(process.cwd(), 'public/data');
const HOUSES_DIR = path.join(DATA_DIR, 'houses');
const PUBLIC_DIR = path.join(process.cwd(), 'public');

interface ValidationResult {
  success: boolean;
  errors: string[];
  warnings: string[];
}

async function validateData(): Promise<ValidationResult> {
  const result: ValidationResult = {
    success: true,
    errors: [],
    warnings: []
  };

  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const requiredFiles = [
      path.join(DATA_DIR, 'index.json'),
      path.join(DATA_DIR, 'houses.A.json'),
      path.join(DATA_DIR, 'houses.B.json'),
      path.join(DATA_DIR, 'houses.C.json')
    ];

    for (const file of requiredFiles) {
      if (!fs.existsSync(file)) {
        result.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`);
      }
    }

    if (result.errors.length > 0) {
      result.success = false;
      return result;
    }

    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    const indexData: CategoriesIndex = JSON.parse(
      fs.readFileSync(path.join(DATA_DIR, 'index.json'), 'utf-8')
    );

    console.log('üìä –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    if (!indexData.categories || !Array.isArray(indexData.categories)) {
      result.errors.push('–ò–Ω–¥–µ–∫—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    const expectedCategories = ['A', 'B', 'C'];
    for (const catId of expectedCategories) {
      const category = indexData.categories.find(c => c.id === catId);
      if (!category) {
        result.errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${catId} –≤ –∏–Ω–¥–µ–∫—Å–µ`);
      }
    }

    // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const allHouseIds = new Set<string>();
    
    for (const catId of expectedCategories) {
      console.log(`üèòÔ∏è –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${catId}...`);
      
      const categoryFile = path.join(DATA_DIR, `houses.${catId}.json`);
      const houses: HouseCard[] = JSON.parse(fs.readFileSync(categoryFile, 'utf-8'));
      
      const category = indexData.categories.find(c => c.id === catId);
      if (category && houses.length !== category.count) {
        result.warnings.push(
          `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–º–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${catId}: ` +
          `—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç ${houses.length}, –∏–Ω–¥–µ–∫—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç ${category.count}`
        );
      }

      for (const house of houses) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
        if (allHouseIds.has(house.id)) {
          result.errors.push(`–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID –¥–æ–º–∞: ${house.id}`);
        }
        allHouseIds.add(house.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!house.name) {
          result.errors.push(`–î–æ–º ${house.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
        }
        if (!house.thumbnail) {
          result.errors.push(`–î–æ–º ${house.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thumbnail`);
        }
        if (house.category !== catId) {
          result.errors.push(`–î–æ–º ${house.id}: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${house.category} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª—É ${catId}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ thumbnail
        if (house.thumbnail) {
          const thumbPath = path.join(PUBLIC_DIR, house.thumbnail);
          if (!fs.existsSync(thumbPath)) {
            result.warnings.push(`–î–æ–º ${house.id}: —Ñ–∞–π–ª thumbnail –Ω–µ –Ω–∞–π–¥–µ–Ω: ${house.thumbnail}`);
          }
        }
      }
    }

    // 4. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤
    console.log('üè† –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–æ–≤...');
    
    if (!fs.existsSync(HOUSES_DIR)) {
      result.errors.push(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${HOUSES_DIR}`);
      result.success = false;
      return result;
    }

    const houseFiles = fs.readdirSync(HOUSES_DIR).filter(f => f.endsWith('.json'));
    
    for (const houseFile of houseFiles) {
      const houseId = path.basename(houseFile, '.json');
      const houseFilePath = path.join(HOUSES_DIR, houseFile);
      
      if (!allHouseIds.has(houseId)) {
        result.warnings.push(`–§–∞–π–ª –¥–æ–º–∞ ${houseId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      }

      try {
        const houseData: HouseDetails = JSON.parse(fs.readFileSync(houseFilePath, 'utf-8'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (houseData.id !== houseId) {
          result.errors.push(`–î–æ–º ${houseId}: ID –≤ —Ñ–∞–π–ª–µ (${houseData.id}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (houseData.hero) {
          const heroPath = path.join(PUBLIC_DIR, houseData.hero);
          if (!fs.existsSync(heroPath)) {
            result.warnings.push(`–î–æ–º ${houseId}: —Ñ–∞–π–ª hero –Ω–µ –Ω–∞–π–¥–µ–Ω: ${houseData.hero}`);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–Ω–æ—Ä–∞–º—ã
        if (houseData.tour360?.enabled && houseData.tour360.panoramas) {
          for (const panorama of houseData.tour360.panoramas) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ç–∞–π–ª–æ–≤
            const tiles = Object.values(panorama.tiles);
            for (const tile of tiles) {
              const tilePath = path.join(PUBLIC_DIR, tile);
              if (!fs.existsSync(tilePath)) {
                result.warnings.push(`–î–æ–º ${houseId}, –ø–∞–Ω–æ—Ä–∞–º–∞ ${panorama.id}: —Ñ–∞–π–ª —Ç–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${tile}`);
              }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
            for (const marker of panorama.markers) {
              if (marker.targetPanoramaId) {
                const targetExists = houseData.tour360!.panoramas.some(p => p.id === marker.targetPanoramaId);
                if (!targetExists) {
                  result.errors.push(
                    `–î–æ–º ${houseId}, –ø–∞–Ω–æ—Ä–∞–º–∞ ${panorama.id}, –º–∞—Ä–∫–µ—Ä ${marker.id}: ` +
                    `—Ü–µ–ª–µ–≤–∞—è –ø–∞–Ω–æ—Ä–∞–º–∞ ${marker.targetPanoramaId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`
                  );
                }
              }
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º relatedIds
        for (const relatedId of houseData.relatedIds) {
          if (!allHouseIds.has(relatedId)) {
            result.errors.push(`–î–æ–º ${houseId}: —Å–≤—è–∑–∞–Ω–Ω—ã–π –¥–æ–º ${relatedId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        }

      } catch (error) {
        result.errors.push(`–î–æ–º ${houseId}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error}`);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–æ–º–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–º–µ—é—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const houseId of allHouseIds) {
      const houseFilePath = path.join(HOUSES_DIR, `${houseId}.json`);
      if (!fs.existsSync(houseFilePath)) {
        result.errors.push(`–î–æ–º ${houseId}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª`);
      }
    }

    result.success = result.errors.length === 0;

  } catch (error) {
    result.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error}`);
    result.success = false;
  }

  return result;
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
if (require.main === module) {
  validateData()
    .then((result) => {
      console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
      
      if (result.success) {
        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:');
      }
      
      if (result.errors.length > 0) {
        console.log('\nüö® –û—à–∏–±–∫–∏:');
        result.errors.forEach(error => console.log(`  - ${error}`));
      }
      
      if (result.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
        result.warnings.forEach(warning => console.log(`  - ${warning}`));
      }
      
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`  - –û—à–∏–±–∫–∏: ${result.errors.length}`);
      console.log(`  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`);
      
      process.exit(result.success ? 0 : 1);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { validateData };
