#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ house-assets.json
 * –£–±–∏—Ä–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã "–¥—Ä—É–≥–∏—Ö –¥–æ–º–æ–≤", —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å relatedIds
 */

import * as fs from 'fs';
import * as path from 'path';
import type { 
  CategoriesIndex, 
  HouseCard, 
  HouseDetails, 
  Panorama, 
  PanoramaMarker,
  DesignPackage,
  HouseCategory,
  CategoryMetadata
} from '../src/types/houses';

// –ü—É—Ç–∏
const SOURCE_FILE = path.join(process.cwd(), 'public/data/house-assets.json');
const OUTPUT_DIR = path.join(process.cwd(), 'public/data');
const HOUSES_DIR = path.join(OUTPUT_DIR, 'houses');

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface SourceHouse {
  name: string;
  description: string;
  maxDP?: number;
  maxPK?: number;
  availableRooms: string[];
  images: {
    hero: string;
    comparison?: Record<string, string>;
  };
  tour360?: {
    rooms: string[];
    markerPositions?: Record<string, Record<string, { yaw: number; pitch: number }>>;
  };
  comparison?: {
    features?: Record<string, any>;
  };
  // –£–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥—Ä—É–≥–∏—Ö –¥–æ–º–æ–≤
  otherHouses?: any[]; // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ relatedIds
}

interface SourceData {
  assetConfig?: any;
  houses: Record<string, SourceHouse>;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORY_CONFIG: Record<HouseCategory, CategoryMetadata> = {
  A: {
    id: 'A',
    title: 'Skyline ADU Collection', 
    count: 0, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    description: 'Compact and efficient ADU designs (1-2 bedrooms)'
  },
  B: {
    id: 'B',
    title: 'Neo ADU Series',
    count: 0,
    description: 'Modern and versatile ADU layouts (2-3 bedrooms)'
  },
  C: {
    id: 'C', 
    title: 'Premium Collection',
    count: 0,
    description: 'Luxury ADU designs with premium finishes (3+ bedrooms)'
  },
  skyline: {
    id: 'skyline',
    title: 'Skyline Collection',
    count: 0,
    description: 'Traditional collection featuring a variety of house designs with beautiful skyline views.'
  },
  neo: {
    id: 'neo',
    title: 'Neo ADU Series',
    count: 0,
    description: 'Modern designs with dual color schemes. Choose between elegant white or sophisticated dark interiors.'
  },
  modern: {
    id: 'modern',
    title: 'Modern Collection',
    count: 0,
    description: 'Contemporary and innovative architectural designs with cutting-edge features and smart home technology.'
  }
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–º–∞
function determineHouseCategory(house: SourceHouse, houseId: string): HouseCategory {
  // –ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ –¥–æ–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A (Skyline ADU Collection)
  return 'A';
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–º–∞
function inferHouseStats(house: SourceHouse): { bedrooms: number; bathrooms: number; sqft: number } {
  const bedrooms = house.availableRooms?.filter(room => room.includes('bedroom')).length || 1;
  const bathrooms = house.availableRooms?.filter(room => room.includes('bathroom')).length || 1;
  
  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
  const roomCount = house.availableRooms?.length || 3;
  const sqft = Math.round((roomCount * 200) + (bedrooms * 150) + (bathrooms * 50));
  
  return { bedrooms, bathrooms, sqft };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º –∏–∑ tour360 –¥–∞–Ω–Ω—ã—Ö
function createPanoramas(tour360: any, houseId: string, category: HouseCategory): Panorama[] {
  if (!tour360?.rooms) return [];
  
  return tour360.rooms.map((room: string): Panorama => {
    const markerPositions = tour360.markerPositions?.[room] || {};
    
    const markers: PanoramaMarker[] = Object.entries(markerPositions).map(([targetRoom, position]: [string, any]) => ({
      id: `marker-${room}-to-${targetRoom}`,
      type: 'room' as const,
      position: {
        yaw: position.yaw || 0,
        pitch: position.pitch || 0
      },
      targetPanoramaId: `${houseId}-${targetRoom}`,
      label: targetRoom.charAt(0).toUpperCase() + targetRoom.slice(1),
      icon: 'üö™'
    }));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—É—Ç–µ–π
    const panoramaPath = `assets/skyline/${houseId}/360`;

    return {
      id: `${houseId}-${room}`,
      room,
      title: room.charAt(0).toUpperCase() + room.slice(1),
      thumbnail: `${panoramaPath}/${room}/thumb.webp`,
      preview: `${panoramaPath}/${room}/preview.webp`,
      tiles: {
        front: `${panoramaPath}/${room}/f.webp`,
        back: `${panoramaPath}/${room}/b.webp`,
        left: `${panoramaPath}/${room}/l.webp`,
        right: `${panoramaPath}/${room}/r.webp`,
        up: `${panoramaPath}/${room}/u.webp`,
        down: `${panoramaPath}/${room}/d.webp`
      },
      defaultView: {
        yaw: 0,
        pitch: 0,
        zoom: 50
      },
      markers
    };
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞
function createDesignPackages(house: SourceHouse, houseId: string, category: HouseCategory): DesignPackage[] {
  const packages: DesignPackage[] = [];
  const maxPackages = house.maxDP || 3;
  
  const assetPath = `assets/${houseId}`;
  
  for (let i = 1; i <= maxPackages; i++) {
    packages.push({
      id: `package-${i}`,
      name: `Design Package ${i}`,
      description: `Premium design option ${i}`,
      thumbnail: `${assetPath}/exterior/dp${i}.webp`,
      images: {
        exterior: [`${assetPath}/exterior/dp${i}.webp`],
        interior: house.availableRooms?.reduce((acc, room) => {
          acc[room] = [`${assetPath}/interior/${room}/pk${i}.webp`];
          return acc;
        }, {} as Record<string, string[]>) || {}
      },
      features: [`Feature ${i}A`, `Feature ${i}B`],
      priceModifier: i > 1 ? (i - 1) * 5000 : 0
    });
  }
  
  return packages;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function extractRelatedIds(house: SourceHouse, allHouseIds: string[]): string[] {
  const relatedIds: string[] = [];
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ "–¥—Ä—É–≥–∏—Ö –¥–æ–º–∞—Ö", –∏–∑–≤–ª–µ–∫–∞–µ–º –∏—Ö IDs
  if (house.otherHouses && Array.isArray(house.otherHouses)) {
    house.otherHouses.forEach((otherHouse: any) => {
      if (otherHouse.id && allHouseIds.includes(otherHouse.id)) {
        relatedIds.push(otherHouse.id);
      }
    });
  }
  
  return relatedIds.slice(0, 4); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤
}

async function splitHouses(): Promise<void> {
  console.log('üè† –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ house-assets.json...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  if (!fs.existsSync(SOURCE_FILE)) {
    throw new Error(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${SOURCE_FILE}`);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  [OUTPUT_DIR, HOUSES_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
  
  // –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
  console.log('üìñ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
  const rawData = fs.readFileSync(SOURCE_FILE, 'utf-8');
  const cleanData = rawData.replace(/^\uFEFF/, ''); // —É–±–∏—Ä–∞–µ–º BOM
  
  let sourceData: SourceData;
  try {
    sourceData = JSON.parse(cleanData);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error}`);
  }
  
  if (!sourceData.houses) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª "houses"');
  }
  
  const houseIds = Object.keys(sourceData.houses);
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–æ–≤: ${houseIds.length}`);
  
  // –°—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryCounts: Record<HouseCategory, number> = { A: 0, B: 0, C: 0, skyline: 0, neo: 0, modern: 0 };
  const categoryCards: Record<HouseCategory, HouseCard[]> = { A: [], B: [], C: [], skyline: [], neo: [], modern: [] };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–∞
  for (const houseId of houseIds) {
    const house = sourceData.houses[houseId];
    const category = determineHouseCategory(house, houseId);
    const stats = inferHouseStats(house);
    const relatedIds = extractRelatedIds(house, houseIds);
    
    console.log(`üè° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${houseId} ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${category} (${CATEGORY_CONFIG[category].title})`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const houseCard: HouseCard = {
      id: houseId,
      name: house.name || `House ${houseId}`,
      description: house.description || '',
      category,
      image: `assets/skyline/${houseId}/hero.webp`, // hero image
      thumbnail: `assets/skyline/${houseId}/hero.webp`,
      bedrooms: stats.bedrooms,
      bathrooms: stats.bathrooms,
      sqft: stats.sqft,
      hasTour360: Boolean(house.tour360?.rooms?.length),
      hasComparison: Boolean(house.comparison?.features),
      hasDesignPackages: Boolean(house.maxDP && house.maxDP > 1)
    };
    
    categoryCards[category].push(houseCard);
    categoryCounts[category]++;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const panoramas = createPanoramas(house.tour360, houseId, category);
    const designPackages = createDesignPackages(house, houseId, category);
    
    const houseDetails: HouseDetails = {
      id: houseId,
      name: house.name || `House ${houseId}`,
      description: house.description || '',
      category,
      bedrooms: stats.bedrooms,
      bathrooms: stats.bathrooms,
      sqft: stats.sqft,
      hero: `assets/skyline/${houseId}/hero.webp`,
      gallery: [], // –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å
      tour360: panoramas.length > 0 ? {
        enabled: true,
        panoramas,
        defaultPanoramaId: panoramas[0]?.id || ''
      } : undefined,
      designPackages,
      defaultDesignPackageId: designPackages[0]?.id,
      comparison: house.comparison?.features ? {
        enabled: true,
        features: house.comparison.features
      } : undefined,
      relatedIds, // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
      tags: [category === 'A' ? 'compact' : category === 'B' ? 'standard' : 'premium'],
      lastUpdated: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const houseFile = path.join(HOUSES_DIR, `${houseId}.json`);
    fs.writeFileSync(houseFile, JSON.stringify(houseDetails, null, 2));
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Object.keys(categoryCounts).forEach(cat => {
    const category = cat as HouseCategory;
    CATEGORY_CONFIG[category].count = categoryCounts[category];
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoriesIndex: CategoriesIndex = {
    categories: Object.values(CATEGORY_CONFIG),
    totalHouses: houseIds.length,
    lastUpdated: new Date().toISOString()
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  fs.writeFileSync(
    path.join(OUTPUT_DIR, 'index.json'),
    JSON.stringify(categoriesIndex, null, 2)
  );
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  for (const [category, cards] of Object.entries(categoryCards)) {
    fs.writeFileSync(
      path.join(OUTPUT_DIR, `houses.${category}.json`),
      JSON.stringify(cards, null, 2)
    );
  }
  
  console.log('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:`);
  console.log(`   - public/data/index.json`);
  console.log(`   - public/data/houses.A.json (${categoryCounts.A} –¥–æ–º–æ–≤ - ${CATEGORY_CONFIG.A.title})`);
  console.log(`   - public/data/houses.B.json (${categoryCounts.B} –¥–æ–º–æ–≤ - ${CATEGORY_CONFIG.B.title})`);
  console.log(`   - public/data/houses.C.json (${categoryCounts.C} –¥–æ–º–æ–≤ - ${CATEGORY_CONFIG.C.title})`);
  console.log(`   - public/data/houses/*.json (${houseIds.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)`);
  console.log('üìã –£–±—Ä–∞–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã "–¥—Ä—É–≥–∏—Ö –¥–æ–º–æ–≤", –¥–æ–±–∞–≤–ª–µ–Ω—ã relatedIds');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  splitHouses().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { splitHouses };
