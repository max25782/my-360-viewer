import os
import glob
from PIL import Image

def rotate_cubemap_images(directory):
    """
    –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 'up' –∏ 'down' –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫—É–±–∏—á–µ—Å–∫–∏—Ö –ø–∞–Ω–æ—Ä–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    :param directory: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å Neo –¥–æ–º–∞–º–∏
    """
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_rotated = 0
    total_skipped = 0
    
    # –®–∞–±–ª–æ–Ω—ã –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_patterns = [
        '360/white/*/u.jpg',
        '360/white/*/d.jpg',
        '360/dark/*/u.jpg',
        '360/dark/*/d.jpg'
    ]
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    def process_images(root_dir):
        nonlocal total_rotated, total_skipped
        
        for pattern in image_patterns:
            search_path = os.path.join(root_dir, pattern)
            print(f"üîç Searching: {search_path}")
            files = glob.glob(search_path, recursive=True)
            
            if not files:
                print(f"‚ö†Ô∏è No files found for pattern: {pattern}")
                continue
                
            print(f"üìÇ Found {len(files)} files for pattern: {pattern}")
            
            for filepath in files:
                try:
                    with Image.open(filepath) as img:
                        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤
                        rotated_img = img.rotate(180)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º
                        rotated_img.save(filepath, quality=95)
                        
                        print(f"‚úÖ Rotated: {filepath}")
                        total_rotated += 1
                
                except Exception as e:
                    print(f"‚ùå Error processing {filepath}: {e}")
                    total_skipped += 1
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Neo –¥–æ–º–æ–≤
    neo_houses = [
        d for d in os.listdir(directory) 
        if os.path.isdir(os.path.join(directory, d)) and not d.startswith('.')
    ]
    
    print("üè† –ù–∞–π–¥–µ–Ω—ã Neo –¥–æ–º–∞:", neo_houses)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º
    for house in neo_houses:
        house_path = os.path.join(directory, house)
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–∞: {house}")
        process_images(house_path)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
          f"–í—Å–µ–≥–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_rotated}\n"
          f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_skipped}")

def main():
    
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å Neo –¥–æ–º–∞–º–∏
    neo_assets_dir = 'public/assets/neo'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(neo_assets_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {neo_assets_dir}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é
    rotate_cubemap_images(neo_assets_dir)

if __name__ == '__main__':
    main()
