#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ f.webp –≤ –≤–∞–Ω–Ω–æ–π Hemlock
"""

import os
from PIL import Image
import shutil

def create_front_image(bathroom_path):
    """–°–æ–∑–¥–∞—Ç—å front –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ back —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 180¬∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ back.webp
        back_path = os.path.join(bathroom_path, "b.webp")
        if not os.path.exists(back_path):
            print(f"‚ùå –§–∞–π–ª {back_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º front –∏–∑ back —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 180¬∞
        with Image.open(back_path) as img:
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 180¬∞
            rotated_img = img.rotate(180)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ f.webp
            front_path = os.path.join(bathroom_path, "f.webp")
            rotated_img.save(front_path, "WEBP", quality=95, method=6)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {front_path}")
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º jpg –≤–µ—Ä—Å–∏—é
            front_jpg_path = os.path.join(bathroom_path, "f.jpg")
            rotated_img.save(front_jpg_path, "JPEG", quality=95)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {front_jpg_path}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –≤–∞–Ω–Ω–æ–π Hemlock
    possible_paths = [
        "public/assets/Hemlock/360/bathroom",
        "public/assets/hemlock/360/bathroom",
        "assets/Hemlock/360/bathroom",
        "assets/hemlock/360/bathroom"
    ]
    
    bathroom_path = None
    
    # –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    for path in possible_paths:
        if os.path.exists(path):
            bathroom_path = path
            break
    
    if not bathroom_path:
        print("‚ùå –ü–∞–ø–∫–∞ –≤–∞–Ω–Ω–æ–π Hemlock –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Ç–∏:")
        for path in possible_paths:
            print(f"  - {path}")
        return
    
    print(f"üè† –ù–∞–π–¥–µ–Ω–∞ –≤–∞–Ω–Ω–∞—è Hemlock: {bathroom_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    files = os.listdir(bathroom_path)
    print("\nüìÅ –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã:")
    for file in sorted(files):
        print(f"  - {file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ f.webp/f.jpg
    if "f.webp" in files or "f.jpg" in files:
        print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –§–∞–π–ª—ã f.webp –∏/–∏–ª–∏ f.jpg —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!")
        choice = input("‚ùì –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã? (y/n): ").strip().lower()
        if choice != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø—ã –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if "f.webp" in files:
            backup = "f.webp.backup"
            shutil.copy2(os.path.join(bathroom_path, "f.webp"), 
                        os.path.join(bathroom_path, backup))
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup}")
        
        if "f.jpg" in files:
            backup = "f.jpg.backup"
            shutil.copy2(os.path.join(bathroom_path, "f.jpg"), 
                        os.path.join(bathroom_path, backup))
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup}")
    
    # –°–æ–∑–¥–∞–µ–º front –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\nüîÑ –°–æ–∑–¥–∞–µ–º front –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ back...")
    if create_front_image(bathroom_path):
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print("  üè† –î–æ–º: Hemlock")
        print("  üõÅ –ö–æ–º–Ω–∞—Ç–∞: Bathroom")
        print("  üìÑ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã: f.webp –∏ f.jpg")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        new_files = [f for f in os.listdir(bathroom_path) if f.startswith('f.')]
        print("\nüìÅ –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        for file in sorted(new_files):
            print(f"  - {file}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å front –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
