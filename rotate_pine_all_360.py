#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –í–°–ï–• –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π u.jpg –∏ d.jpg –Ω–∞ 180¬∞ 
–≤ –¥–æ–º–µ Pine (–ø–∞–ø–∫–∞ 3D)
"""

import os
import glob
import shutil
from datetime import datetime
from PIL import Image

def create_backup(file_path):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞"""
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(file_path, backup_path)
    return backup_path

def rotate_image_180(image_path, create_backup_flag=True):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤"""
    try:
        if create_backup_flag:
            backup_path = create_backup(image_path)
            print(f"üíæ –ë—ç–∫–∞–ø: {backup_path}")
        
        with Image.open(image_path) as img:
            rotated_img = img.rotate(180)
            rotated_img.save(image_path, quality=95, optimize=True)
            print(f"‚úÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ: {image_path}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ {image_path}: {e}")
        return False

def main():
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–æ–º—É Pine (–≤ –ø–∞–ø–∫–µ 3D)
    possible_paths = [
        "public/assets/Pine/360",
        "public/assets/pine/360", 
        "assets/Pine/360",
        "assets/pine/360"
    ]
    
    pine_path = None
    
    # –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
    for path in possible_paths:
        if os.path.exists(path):
            pine_path = path
            break
    
    if not pine_path:
        print("‚ùå –ü–∞–ø–∫–∞ Pine/3D –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Ç–∏:")
        for path in possible_paths:
            print(f"  - {path}")
        return
    
    print(f"üè† –ù–∞–π–¥–µ–Ω –¥–æ–º Pine: {pine_path}")
    
    # –ù–∞–π—Ç–∏ –í–°–ï —Ñ–∞–π–ª—ã u.jpg –∏ d.jpg –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
    u_files = glob.glob(f"{pine_path}/**/u.jpg", recursive=True)
    d_files = glob.glob(f"{pine_path}/**/d.jpg", recursive=True)
    u_webp = glob.glob(f"{pine_path}/**/u.webp", recursive=True)
    d_webp = glob.glob(f"{pine_path}/**/d.webp", recursive=True)
    
    all_files = u_files + d_files + u_webp + d_webp
    
    if not all_files:
        print("‚ùå –§–∞–π–ª—ã u.jpg/d.jpg/u.webp/d.webp –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {pine_path}:")
        try:
            dirs = [d for d in os.listdir(pine_path) if os.path.isdir(os.path.join(pine_path, d))]
            print(f"  –ö–æ–º–Ω–∞—Ç—ã: {', '.join(dirs)}")
            for room in dirs:
                room_path = os.path.join(pine_path, room)
                files = os.listdir(room_path)
                print(f"    {room}: {', '.join(files)}")
        except:
            print("  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    rooms = {}
    for file_path in all_files:
        room_name = file_path.split(os.sep)[-2]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        if room_name not in rooms:
            rooms[room_name] = []
        rooms[room_name].append(file_path)
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–æ–º–µ Pine:")
    for room, files in rooms.items():
        print(f"  üè† {room}: {len(files)} —Ñ–∞–π–ª–æ–≤")
        for file_path in files:
            filename = os.path.basename(file_path)
            print(f"    - {filename}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    choice = input(f"\n‚ùì –ü–æ–≤–µ—Ä–Ω—É—Ç—å –í–°–ï {len(all_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π u/d –Ω–∞ 180¬∞? (y/n): ").strip().lower()
    if choice != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –í–æ–ø—Ä–æ—Å –æ –±—ç–∫–∞–ø–µ
    backup_choice = input("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –ø–æ–≤–æ—Ä–æ—Ç–æ–º? (y/n): ").strip().lower()
    create_backup_flag = backup_choice == 'y'
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print(f"\nüîÑ –ü–æ–≤–æ—Ä–æ—Ç –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π u/d –≤ –¥–æ–º–µ Pine...")
    success_count = 0
    total_count = len(all_files)
    
    for i, image_path in enumerate(all_files, 1):
        print(f"\n[{i}/{total_count}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {image_path}")
        if rotate_image_180(image_path, create_backup_flag):
            success_count += 1
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  üè† –î–æ–º: Pine")
    print(f"  üìÅ –ü–∞–ø–∫–∞: 3D (360¬∞ files)")
    print(f"  üè† –ö–æ–º–Ω–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(rooms)}")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
    if success_count < total_count:
        print(f"  ‚ùå –û—à–∏–±–∫–∏: {total_count - success_count} —Ñ–∞–π–ª–æ–≤")
    print(f"  üîÑ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è u –∏ d –≤ Pine –ø–æ–≤–µ—Ä–Ω—É—Ç—ã –Ω–∞ 180¬∞")
    
    print(f"\nüè† –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:")
    for room in rooms.keys():
        print(f"  ‚úÖ {room}")
    
    if create_backup_flag:
        print(f"\nüíæ –ë—ç–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .backup_YYYYMMDD_HHMMSS")

if __name__ == "__main__":
    main()
